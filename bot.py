import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
API_TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"
ADMIN_ID = 123456789  # –í–∞—à ID –≤ Telegram (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —É @userinfobot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    wait_product_data = State()
    wait_product_delete = State()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
def get_db():
    conn = sqlite3.connect('shop.db')
    return conn

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def init_db():
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            price INTEGER NOT NULL,
            description TEXT,
            login TEXT,
            password TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            product_id INTEGER NOT NULL,
            status TEXT DEFAULT 'pending',
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ ===== #
def get_main_keyboard(is_admin=False):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        *([[InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]] if is_admin else [])
    ])
    return keyboard

def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
        [InlineKeyboardButton(text="üìä –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

def get_products_keyboard():
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, price FROM products")
    products = cursor.fetchall()
    conn.close()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        *[[InlineKeyboardButton(text=f"{product[1]} - {product[2]}‚ÇΩ", callback_data=f"buy_{product[0]}")] for product in products],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===== #
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    is_admin = (message.from_user.id == ADMIN_ID)
    await message.answer(
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!",
        reply_markup=get_main_keyboard(is_admin)
    )

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===== #
@dp.callback_query(Text("main_menu"))
async def main_menu(call: types.CallbackQuery):
    is_admin = (call.from_user.id == ADMIN_ID)
    await call.message.edit_text(
        "üõí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(is_admin)
    )

@dp.callback_query(Text("catalog"))
async def show_catalog(call: types.CallbackQuery):
    await call.message.edit_text(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_products_keyboard()
    )

@dp.callback_query(Text("admin_panel"))
async def admin_panel(call: types.CallbackQuery):
    if call.from_user.id == ADMIN_ID:
        await call.message.edit_text(
            "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )
    else:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")

# ===== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===== #
@dp.callback_query(Text("add_product"))
async def add_product_start(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        await call.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<b>–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –û–ø–∏—Å–∞–Ω–∏–µ | –õ–æ–≥–∏–Ω | –ü–∞—Ä–æ–ª—å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>YouTube Premium | 500 | –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ 1 –º–µ—Å—è—Ü | test@mail.com | 12345</code>"
        )
        await state.set_state(AdminStates.wait_product_data)
    else:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")

@dp.message(AdminStates.wait_product_data)
async def add_product_finish(message: types.Message, state: FSMContext):
    try:
        name, price, desc, login, password = map(str.strip, message.text.split("|"))
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO products (name, price, description, login, password) VALUES (?, ?, ?, ?, ?)",
            (name, int(price), desc, login, password)
        )
        conn.commit()
        conn.close()
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()

@dp.callback_query(Text("list_products"))
async def list_products(call: types.CallbackQuery):
    if call.from_user.id == ADMIN_ID:
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, price FROM products")
        products = cursor.fetchall()
        conn.close()

        if not products:
            await call.answer("üóÉ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç!")
            return

        text = "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        for product in products:
            text += f"{product[0]}. {product[1]} - {product[2]}‚ÇΩ\n"

        await call.message.edit_text(text, reply_markup=get_admin_keyboard())
    else:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")

@dp.callback_query(Text("delete_product"))
async def delete_product_start(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        await call.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(AdminStates.wait_product_delete)
    else:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")

@dp.message(AdminStates.wait_product_delete)
async def delete_product_finish(message: types.Message, state: FSMContext):
    try:
        product_id = int(message.text)
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()
        conn.close()
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()

# ===== –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê ===== #
@dp.callback_query(Text(startswith="buy_"))
async def process_buy(call: types.CallbackQuery):
    product_id = int(call.data.split("_")[1])
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT name, price FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await call.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    pay_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å (—Ç–µ—Å—Ç)", callback_data=f"pay_{product_id}")]
    ])

    await call.message.edit_text(
        f"üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"–¢–æ–≤–∞—Ä: {product[0]}\n"
        f"–¶–µ–Ω–∞: {product[1]}‚ÇΩ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=pay_keyboard
    )

@dp.callback_query(Text(startswith="pay_"))
async def process_pay(call: types.CallbackQuery):
    product_id = int(call.data.split("_")[1])
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT name, price, login, password FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await call.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    await call.message.edit_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"–¢–æ–≤–∞—Ä: {product[0]}\n"
        f"–¶–µ–Ω–∞: {product[1]}‚ÇΩ\n\n"
        "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n"
        f"–õ–æ–≥–∏–Ω: <code>{product[2]}</code>\n"
        f"–ü–∞—Ä–æ–ª—å: <code>{product[3]}</code>"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())